
// B - 0xCF - (byte *)0x09162e07
const ABILITIES_RESTRICTED = [
    0x01, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
    0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12,
    0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x1A, 0x1B,
    0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x25,
    0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2E,
    0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
    0x37, 0x38, 0x39, 0x3A, 0x3C, 0x3D, 0x3E, 0x3F,
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
    0x48, 0x49, 0x4B, 0x4D, 0x4E, 0x4F, 0x51, 0x52,
    0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5B,
    0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63,
    0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B,
    0x6C, 0x6D, 0x6E, 0x70, 0x71, 0x72, 0x73, 0x74,
    0x77, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
    0x80, 0x81, 0x82, 0x84, 0x85, 0x87, 0x88, 0x89,
    0x8A, 0x8B, 0x8C, 0x8D, 0x90, 0x91, 0x92, 0x93,
    0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9E,
    0xA0, 0xA1, 0xA2, 0xA3, 0xA6, 0xA7, 0xA9, 0xAB,
    0xAF, 0xB1, 0xB2, 0xB3, 0xB9, 0xBA, 0xBB, 0xBC,
    0xBD, 0xBE, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC6,
    0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCE, 0xD0,
    0xD1, 0xD2, 0xD7, 0xD8, 0xD9, 0xDA, 0xDC, 0xDD,
    0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5,
    0xE6, 0xE7, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE,
    0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6,
    0xF8, 0xF9, 0xFB, 0x4A, 0xFE, 0xFF, 0xFD,
];

// A - 0xEC - (byte *)0x09162ed7
const ABILITIES_NORMAL = [
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
    0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
    0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21,
    0x22, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A,
    0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32,
    0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,
    0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43,
    0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4B, 0x4D,
    0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55,
    0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D,
    0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65,
    0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D,
    0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
    0x76, 0x77, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E,
    0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86,
    0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E,
    0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
    0x97, 0x98, 0x99, 0x9A, 0x9D, 0x9E, 0xA0, 0xA1,
    0xA2, 0xA3, 0xA6, 0xA7, 0xA9, 0xAB, 0xAC, 0xAD,
    0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB5, 0xB6, 0xB7,
    0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
    0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
    0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCE, 0xCF, 0xD0,
    0xD1, 0xD2, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9,
    0xDA, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2,
    0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE9, 0xEA, 0xEB,
    0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3,
    0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFB, 0xFC,
    0x4A, 0xFE, 0xFF, 0xFD,
];

const CHARACTER_ENCODINGS = [
    " ", "À", "Á", "Â", "Ç", "È", "É", "Ê", "Ë", "Ì", "", "Î", "Ï", "Ò", "Ó", "Ô",
    "Œ", "Ù", "Ú", "Û", "Ñ", "ß", "à", "á", "", "ç", "è", "é", "ê", "ë", "ì", "",
    "î", "ï", "ò", "ó", "ô", "œ", "ù", "ú", "û", "ñ", "º", "ª", "ᵉʳ", "&", "+", "",
    "", "", "", "", "Lv", "=", ";", "", "", "", "", "", "", "", "", "",
    "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
    "▯", "¿", "¡", "PK", "MN", "PO", "Ké", "", "", "", "Í", "%", "(", ")", " ", " ",
    " ", " ", " ", " ", " ", "", "", "", "â", "", "", "", "", "", "", "í",
    "", "", "", "", "", "", "", "", "", "↑", "↓", "←", "→", "*", "*", "*",
    "*", "*", "*", "*", "ᵉ", "<", ">", "", "", "", "", "", "", "", "", "",
    "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
    "ʳᵉ", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "!", "?", ".", "-", "･",
    "…", "“", "”", "‘", "’", "♂", "♀", "$", ",", "×", "/", "A", "B", "C", "D", "E",
    "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U",
    "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k",
    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "►",
    ":", "Ä", "Ö", "Ü", "ä", "ö", "ü", "", "", "", "", "", "", "", "", ""
]

function tryRandomizeAbility(trainedId, restricted, ability, species) {
    trainedId = Math.max(1, trainedId);
    const abilities = restricted ? ABILITIES_RESTRICTED : ABILITIES_NORMAL;
    const abilitiesCount = abilities.length;
    const secretIdLowerByte = ((trainedId >> 0x10) & 0xFFFF) % 0xFF;
    let newAbilityIdx = (trainedId & 0xffff) % abilitiesCount;
    newAbilityIdx = (newAbilityIdx + species + ability) & 0xFFFF;
    if (newAbilityIdx > abilitiesCount) {
        newAbilityIdx = (newAbilityIdx - abilitiesCount + 2) & 0xFFFF;
    }
    newAbilityIdx = (newAbilityIdx ^ secretIdLowerByte & 0xFFFF) % abilitiesCount;
    return abilities[newAbilityIdx];
}

function getAbility(ability, species) {
    if (!saveData) {
        return ability;
    }

    const randomizedAbility = tryRandomizeAbility(saveData.trainedId, saveData.restricted, ability[0], species);
    return [randomizedAbility, 0];
}

const NAME_OFFSET = 0x000;
const TRAINED_ID_OFFSET = 0x00A;
// RAM 0203B25A 0x10 = Hardmode
// RAM 0203B25A 0x04 = MGM
const HARDMODE_BITFLAG = 0xDB2;
// RAM 0203B26B 0x40 = Restricted
const RESTRICTED_BITFLAG = 0xDC3;

function findSector(file, id) {
    let latestOffset = -1;
    let latestSaveIndex = -1;
    for (let x = 0x0; x < 0x1C000; x += 0x1000) {
        const sectorId = file.getUint16(x + 0xFF4, true);
        const saveIndex = file.getUint32(x + 0xFFC, true);
        if (sectorId === id && saveIndex > latestSaveIndex) {
            latestOffset = x;
            latestSaveIndex = saveIndex;
        }
    }

    return latestOffset;
}

function readDataFromSaveFile(file) {
    const trainerInfo = findSector(file, 0x0);
    const trainedId = file.getUint32(trainerInfo + TRAINED_ID_OFFSET, true);
    let name = "";
    for (let idx = 0; idx < 8; idx++) {
        const char = file.getUint8(trainerInfo + NAME_OFFSET + idx);
        if (char == 0xFF) {
            break;
        }
        name += CHARACTER_ENCODINGS[char];
    }

    const gameSpecificData = findSector(file, 0x4);
    const hardmodeBitflag = file.getUint8(gameSpecificData + HARDMODE_BITFLAG);
    const hardmode = (hardmodeBitflag & 0x10) > 0;
    const restrictedBitFlag = file.getUint8(gameSpecificData + RESTRICTED_BITFLAG);
    const restricted = (restrictedBitFlag & 0x40) > 0;
    return {
        name,
        trainedId,
        restricted,
        hardmode,
    }
}

function openSaveFileDialog() {
    document.getElementById("saveFileInput").click();
}

document.getElementById("saveFileInput").addEventListener("change", function() {
    var [file] = document.getElementById("saveFileInput").files;
    if (file) {
        file.arrayBuffer().then(buffer => {
            const view = new DataView(buffer);
            saveData = readDataFromSaveFile(view);
            console.log(saveData);
            if (!!species) {    
            	populateTable('speciesTable', Object.values(species));
            }
        })
    }
});

// console.log(tryRandomizeAbility(data.trainedId, data.restricted, 67, 7).toString(16));